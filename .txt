(self notes)


//////////////////////////////////////////////////////////////////////////
//Using ONLY IF Statements
// //DiceRoll Function
// var rollDice = function () {
//   //determine max number here
//   return 1;
//   return Math.floor(Math.random() * 3) + 1;
// };

// // Define computer result.
// var SPS = function () {
//   var computerResult = rollDice();
//   var computerPlays = "try again";
//   if (computerResult == 1) {
//     var computerPlays = "error";
//     computerPlays = `scissors`;
//     return computerPlays;
//   }
//   if (computerResult == 2) {
//     computerPlays = `paper`;
//     return computerPlays;
//   }
//   if (computerResult == 3) {
//     computerPlays = `stone`;
//     return computerPlays;
//   }
//   return computerPlays;
// };

// //main function
// var main = function (input) {
//   var myOutputValue = `Please input "scissors", "paper" or "stone"`;
//   //declare result -> can't be global because we need it to change with every submit
//   var computerPlays = SPS();
//   console.log("SPS function");
//   console.log(computerPlays);

//   var standardMessage = `Computer: ${computerPlays}. <br> Your input: ${input}. <br> `;
//   console.log("std message");
//   console.log(computerPlays);
//   //this losting IF-statement has to run first so that it will run if the last condition is not met. This is setting the output twice, which is inefficient. This might also cause an unexpected outcome????????
//   if (input == "scissors" || input == "paper" || input == "stone") {
//     myOutputValue = `${standardMessage} <br> you lose! <br> Now you can type "scissors", "paper" or "stone" to play another round!`;
//   }

//   if (
//     (input == `scissors` && computerPlays == `paper`) ||
//     (input == `paper` && computerPlays == `stone`) ||
//     (input == `stone` && computerPlays == `scissors`)
//   ) {
//     myOutputValue = ` ${standardMessage} you win! <br> Now you can type "scissors", "paper" or "stone" to play another round!`;
//     console.log("IF Statement");
//     console.log(myOutputValue);
//   }

//   return myOutputValue;